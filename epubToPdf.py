"""
This script is to convert the downloaded epub structure to pdf.
The main reason for this script was problematic loading on epub viewers. With pdf there is no possibility to change the font size etc. but it loads faster and is more interactive.
"""
from os.path import join
import xml.etree.ElementTree as XmlElementTree
import argparse
import os

def getOrderedListOfBookFilePaths(bookPath):
    filename = join(bookPath, 'OEBPS', 'content.opf')
    xmlElementTree = XmlElementTree.parse(filename)
    root = xmlElementTree.getroot()
    chapters = root.findall('./{http://www.idpf.org/2007/opf}spine/{http://www.idpf.org/2007/opf}itemref')
    chapterIds = [c.attrib["idref"] for c in chapters]
    chapterFiles = []
    for cid in chapterIds:
        celement = root.find('.//{{http://www.idpf.org/2007/opf}}item[@id="{}"]'.format(cid))
        cfile = celement.attrib["href"]
        cpath = join(bookPath, 'OEBPS', cfile)
        chapterFiles.append(cpath)
    return chapterFiles

def printListOfPages(listOfPages):
    listOfPdfs = []
    for p in listOfPages:
        pdffile = "{}.pdf".format(p)
        cmd = "wkhtmltopdf -s A7 '{}' '{}'".format(p, pdffile)
        print(cmd)
        os.system(cmd)
        listOfPdfs.append(pdffile)
    return listOfPdfs

def mergePdfFilesToOne(listOfPdfs):
    inputs = " ".join(["'"+p+"'" for p in listOfPdfs])
    cmd = "pdfunite {} output.pdf".format(inputs)
    print(cmd)
    os.system(cmd)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='This script converts the file structure of a epub, generated by safaribooks to a pdf.')
    parser.add_argument('path', type=str, help='path to book dir')
    args = parser.parse_args()
    
    bookFiles = getOrderedListOfBookFilePaths(args.path)
    pdfFiles = printListOfPages(bookFiles)
    mergePdfFilesToOne(pdfFiles)
